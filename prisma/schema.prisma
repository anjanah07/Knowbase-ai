// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  users       Membership[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Document    Document[]
  Chunk       Chunk[]
  UsageRecord UsageRecord[]
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  image         String? // ✅ add this
  emailVerified DateTime? // ✅ add this
  memberships   Membership[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Account       Account[]
  Session       Session[]
  UsageRecord   UsageRecord[]
}

model Membership {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  role     Role   @default(MEMBER)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Document {
  id        String    @id @default(cuid())
  tenantId  String
  title     String
  mimeType  String
  bytesUrl  String
  status    DocStatus @default(PENDING)
  error     String?
  Tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chunks    Chunk[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([tenantId])
}

enum DocStatus {
  PENDING
  READY
  FAILED
}

model Chunk {
  id         String   @id @default(cuid())
  tenantId   String
  documentId String
  position   Int
  content    String
  Tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([documentId])
}

model UsageRecord {
  id        String      @id @default(cuid())
  tenantId  String
  userId    String?
  action    UsageAction // EMBED | CHAT
  tokensIn  Int         @default(0)
  tokensOut Int         @default(0)
  costUsd   Decimal     @default(0)
  createdAt DateTime    @default(now())

  Tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, createdAt])
}

enum UsageAction {
  EMBED
  CHAT
}

model Job {
  id        String    @id @default(cuid())
  tenantId  String
  type      JobType
  status    JobStatus @default(QUEUED)
  payload   Json
  attempts  Int       @default(0)
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([status, type, createdAt])
  @@index([tenantId])
}

enum JobType {
  INGEST_DOCUMENT
}

enum JobStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}
